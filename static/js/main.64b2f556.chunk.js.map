{"version":3,"sources":["Table.js","Search.js","PageSize.js","Pagination.js","App.js","index.js"],"names":["Table","promp","console","log","apiData","results","tableData","colm","Object","keys","id","cellPadding","cellSpacing","map","heading","row","column","Search","setSearchQuery","setPageNumber","useState","value","setValue","onChange","event","target","onClick","className","PageSize","setPageSize","name","Pagination","pager","page","pageCount","parseInt","onPrevious","onNext","App","setApiData","searchQuery","pageNumber","pageSize","useEffect","apiQuery","fetch","then","json","data","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.64b2f556.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Table(promp) {\n    console.log(promp.apiData);  \n  if (!promp.apiData.results) {\n    // If the API request isn't completed return \"loading...\"\"\n    return <p>Loading...</p>;\n  } else {\n    // Write your code here:\n    var tableData = promp.apiData.results;\n    const colm = tableData[0] && Object.keys(tableData[0]);\n    return (\n    <>\n    <table id=\"countries\" cellPadding={0} cellSpacing={0}>\n        <thead>\n            <tr>\n                {tableData[0] && colm.map((heading) => <th>{heading}</th>)}\n            </tr>\n        </thead>\n\n        <tbody>\n            {tableData.map(row => \n                    <tr>\n                        {colm.map((column) => (\n                            <td>{row[column]}</td>\n                        ))}\n                    </tr>\n                    )}\n        </tbody>\n    </table>\n    </>\n    );\n  }\n}\n\nexport default Table;\n","import React, { useState } from \"react\";\n\nfunction Search({setSearchQuery, setPageNumber}) {\n    const [value, setValue] = useState('');\n    const onChange = (event) => {\n        setValue(event.target.value);\n    };\n\n    const searchQuery = (event) => {\n        setSearchQuery(value);\n        setPageNumber(1);\n    }\n\n    return (\n        <>\n            <input value={value} onChange={onChange} />\n            <button onClick={searchQuery} className=\"button\">Search</button>\n        </>\n    );\n}\n\nexport default Search;","import React from \"react\";\n\nfunction PageSize({ setPageSize }) {\n    const onChange = (event) => {\n        setPageSize(event.target.value)\n    };\n    return (\n        <div>\n            <span>Results per page</span>\n            <select name=\"results\" id=\"results\" onChange={onChange}>\n                <option value=\"5\">5</option>\n                <option value=\"10\">10</option>\n                <option value=\"20\">20</option>\n            </select>\n        </div>\n    )\n}\n\nexport default PageSize;","import React from \"react\";\n\nfunction Pagination( { setPageNumber, apiData }) {\n\n    const onNext = (page) => {\n        setPageNumber(parseInt(page) + 1)\n    };\n\n    const onPrevious = (page) => {\n        setPageNumber(parseInt(page) - 1)\n    };\n\n    if (apiData.pager) {\n        const page = apiData.pager.page;\n        const pageCount = apiData.pager.pageCount;\n\n        return (\n            <div>\n                {page > 1 ?\n                    <button onClick={() => onPrevious(page)} className=\"button\">Previous</button>\n                    : <></>\n                }\n                <span>Page {page} of {pageCount}</span>\n                {page < pageCount ?\n                    <button onClick={() => onNext(page)} className=\"button\">Next</button>\n                    : <></>\n                }\n            </div>         \n        );\n    }\n    else {\n        return (<div></div>);\n    }\n}\n\nexport default Pagination;","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport Table from \"./Table.js\";\nimport Search from \"./Search.js\";\nimport PageSize from \"./PageSize.js\";\nimport Pagination from \"./Pagination.js\";\n\nfunction App() {\n  /* Create state:\n        - apiData: List containing dictionaries of countries from API.\n        - searchQuery: The query parameter that should be added to &search=\n        - pageNumber: The page that is requested\n  */\n\n  const [apiData, setApiData] = useState([]);\n  const [searchQuery, setSearchQuery] = useState(); // Default = No search query\n  const [pageNumber, setPageNumber] = useState(1); //Default = Page 1\n  const [pageSize, setPageSize] = useState(10);\n\n  useEffect(() => {\n    // All parameters are appended to this URL.\n    let apiQuery = \"https://dhis2-app-course.ifi.uio.no/api?\";\n\n    // If searchQuery isn't empty add &search=searchQuery to the API request.\n    if (searchQuery) {\n      apiQuery = apiQuery + \"&search=\" + searchQuery;\n    }\n\n    // Add what page we are requesting to the API request.\n    apiQuery = apiQuery + \"&page=\" + pageNumber;\n    apiQuery = apiQuery + \"&pageSize=\" + pageSize;\n\n    // Query data from API.\n    console.log(\"Querying: \" + apiQuery);\n    fetch(apiQuery)\n      .then((results) => results.json())\n      .then((data) => {\n        // Then add response to state.\n        setApiData(data);\n      });\n  }, [searchQuery, pageNumber, pageSize]); // Array containing which state changes that should re-reun useEffect()\n\n  return (\n    <div className=\"App\">\n      <h1>Country Lookup</h1>\n      <Search setSearchQuery={setSearchQuery} setPageNumber={setPageNumber} />\n      <Table apiData={apiData} />\n      <Pagination setPageNumber={setPageNumber} apiData={apiData} />\n      <PageSize setPageSize={setPageSize} />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}